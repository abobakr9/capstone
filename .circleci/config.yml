# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0
  node: circleci/node@4.1.0
  slack: circleci/slack@4.1
  

jobs:
  lint:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-docker:
   machine: true
   steps:
     - checkout
     # credentials stored in the UI
     - run: |
         echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin

     # build the application image
     - run: |
          docker build --tag=capstone .
          docker image ls

     # push the image to dockerhub
     - run: |
          docker image tag capstone $dockerpath:${CIRCLE_WORKFLOW_ID:0:7}
          docker image push $dockerpath:${CIRCLE_WORKFLOW_ID:0:7}
     - slack/notify:
          event: fail
          template: basic_fail_1

  create-small-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: deployment.yml
          resource-name: deployment/capstone-deployment
      - run:
          name: cluster check
          command: |
            kubectl get svc 
            kubectl get pods
            kubectl get deployment
      - slack/notify:
          event: fail
          template: basic_fail_1

workflows:
  default:
    jobs:
      - lint
      - build-docker:
            requires: [lint]
      - create-small-cluster:
          cluster-name: capstone-cluster-${CIRCLE_WORKFLOW_ID:0:7}
      - deploy-cluster:
          cluster-name: capstone-cluster-${CIRCLE_WORKFLOW_ID:0:7}
          requires: [create-small-cluster,build-docker]