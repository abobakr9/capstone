# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  node: circleci/node@4.1.0
  slack: circleci/slack@4.1
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.12.0
  

jobs:
  lint:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
  build-docker:
   machine: true
   steps:
     - checkout
     # credentials stored in the UI
     - run: |
         echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin

     # build the application image
     - run: |
          docker build --tag=capstone .
          docker image ls

     # push the image to dockerhub
     - run: |
          docker image tag capstone $dockerpath:${CIRCLE_WORKFLOW_ID:0:7}
          docker image push $dockerpath:${CIRCLE_WORKFLOW_ID:0:7}
  deploy-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          capstone-cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yaml
          resource-name: deployment.app/ml-app
      - run:
          name: cluster check
          command: |
            kubectl get svc 
            kubectl get pods
            kubectl get deployment

workflows:
  default:
    jobs:
      - lint
      - build-docker:
            requires: [lint]
      - aws-eks/create-cluster:
          cluster-name: capstone-cluster
      - deploy-cluster:
          cluster-name: capstone-cluster
          requires:
            - aws-eks/create-cluster